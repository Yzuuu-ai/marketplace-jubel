// src/pages/Profile.jsx

import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useAdmin } from '../context/AdminContext';
import Header from '../components/Header';

const Profile = () => {
  const { 
    walletAddress, 
    isAuthenticated, 
    profileData, 
    updateProfileData, 
    accountType, 
    currentUser,
    connectWallet,
    disconnectWallet,
    saveWalletAddress,
    logout // Adding logout to handle disconnection
  } = useAuth();
  const { escrowTransactions } = useAdmin();
  
  const [isEditing, setIsEditing] = useState(false);
  const [editData, setEditData] = useState({ 
    nama: '', 
    email: '', 
    nomor: '' 
  });
  const [transactionStats, setTransactionStats] = useState({
    totalTransactions: 0,
    asSeller: 0,
    asBuyer: 0,
    completedSales: 0,
    completedPurchases: 0
  });
  const [isConnectingWallet, setIsConnectingWallet] = useState(false);
  const [showWalletForm, setShowWalletForm] = useState(false);
  const [newWalletAddress, setNewWalletAddress] = useState('');

  useEffect(() => {
    if (accountType === 'email' && currentUser) {
      setEditData({
        nama: currentUser.nama || '',
        email: currentUser.email || '',
        nomor: currentUser.nomor || ''
      });
    } else if (accountType === 'wallet' && walletAddress) {
      const savedProfiles = JSON.parse(localStorage.getItem('userProfiles') || '{}');
      const userProfile = savedProfiles[walletAddress];

      if (userProfile) {
        setEditData(userProfile);
      } else {
        setEditData({
          nama: `User-${walletAddress.substring(0, 6)}`,
          email: '',
          nomor: ''
        });
      }
    }
  }, [walletAddress, accountType, currentUser]);

  useEffect(() => {
    if (walletAddress && escrowTransactions) {
      const effectiveWallet = accountType === 'email' ? walletAddress : walletAddress;
      
      const sellerTransactions = escrowTransactions.filter(tx => tx.sellerWallet === effectiveWallet);
      const buyerTransactions = escrowTransactions.filter(tx => tx.buyerWallet === effectiveWallet);

      const completedSales = sellerTransactions.filter(tx => tx.status === 'completed').length;
      const completedPurchases = buyerTransactions.filter(tx => tx.status === 'completed').length;

      setTransactionStats({
        totalTransactions: sellerTransactions.length + buyerTransactions.length,
        asSeller: sellerTransactions.length,
        asBuyer: buyerTransactions.length,
        completedSales,
        completedPurchases
      });
    }
  }, [walletAddress, escrowTransactions, accountType]);

  const handleEditToggle = () => {
    if (isEditing) {
      if (accountType === 'email' && currentUser) {
        setEditData({
          nama: currentUser.nama || '',
          email: currentUser.email || '',
          nomor: currentUser.nomor || ''
        });
      } else {
        setEditData({ ...profileData });
      }
    }
    setIsEditing(!isEditing);
  };

  const handleSave = () => {
    if (!editData.nama.trim()) {
      alert('Nama tidak boleh kosong');
      return;
    }

    if (accountType === 'email') {
      const registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');
      const updatedUsers = registeredUsers.map(user => {
        if (user.id === currentUser.id) {
          return {
            ...user,
            nama: editData.nama,
            nomor: editData.nomor
          };
        }
        return user;
      });
      localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));

      const session = JSON.parse(localStorage.getItem('currentSession') || '{}');
      if (session.userId === currentUser.id) {
        session.nama = editData.nama;
        localStorage.setItem('currentSession', JSON.stringify(session));
      }
    } else {
      const savedProfiles = JSON.parse(localStorage.getItem('userProfiles') || '{}');
      savedProfiles[walletAddress] = editData;
      localStorage.setItem('userProfiles', JSON.stringify(savedProfiles));
    }

    updateProfileData(editData);

    const gameAccounts = JSON.parse(localStorage.getItem('gameAccounts') || '[]');
    const updatedAccounts = gameAccounts.map(account => {
      if (account.sellerWallet === walletAddress) {
        return { ...account, sellerName: editData.nama };
      }
      return account;
    });
    localStorage.setItem('gameAccounts', JSON.stringify(updatedAccounts));

    setIsEditing(false);
  };

  const handleInputChange = (field, value) => {
    setEditData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleConnectWalletClick = async () => {
    setIsConnectingWallet(true);
    try {
      await connectWallet();
      setShowWalletForm(false);
    } catch (error) {
      console.error('Error connecting wallet:', error);
      alert('Gagal menghubungkan wallet: ' + error.message);
    } finally {
      setIsConnectingWallet(false);
    }
  };

  const handleManualWalletConnect = () => {
    if (!newWalletAddress) {
      alert('Alamat wallet tidak boleh kosong');
      return;
    }
    
    if (!/^0x[a-fA-F0-9]{40}$/.test(newWalletAddress)) {
      alert('Alamat wallet tidak valid');
      return;
    }
    
    saveWalletAddress(newWalletAddress);
    setShowWalletForm(false);
    setNewWalletAddress('');
  };

  const handleDisconnectWallet = () => {
    if (window.confirm('Apakah Anda yakin ingin melepas wallet ini?')) {
      logout(); // Calls the logout function to disconnect the wallet
    }
  };

  const shortenAddress = (address) => {
    if (!address) return '';
    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md text-center">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Akses Ditolak</h2>
          <p className="text-gray-600">Silakan login terlebih dahulu untuk mengakses halaman profil.</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Header />
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header */}
          <div className="bg-white rounded-lg shadow-sm mb-6">
            <div className="px-6 py-4 border-b border-gray-200">
              <h1 className="text-2xl font-bold text-gray-900">Profil Saya</h1>
              <p className="text-gray-600 mt-1">Kelola informasi profil dan akun Anda</p>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Sidebar Profile Info */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="text-center">
                  {/* Avatar */}
                  <div className={`w-24 h-24 ${accountType === 'email' ? 'bg-purple-600' : 'bg-blue-600'} rounded-full flex items-center justify-center mx-auto mb-4`}>
                    <span className="text-3xl font-bold text-white">
                      {editData.nama ? editData.nama.charAt(0).toUpperCase() : 'U'}
                    </span>
                  </div>

                  <h3 className="text-lg font-semibold text-gray-900 mb-1">
                    {editData.nama || 'Unnamed User'}
                  </h3>

                  <p className="text-sm text-gray-500 mb-4">
                    {accountType === 'email' ? 'Email Account' : `Wallet: ${shortenAddress(walletAddress)}`}
                  </p>

                  <div className="flex items-center justify-center space-x-2 text-sm">
                    <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                    <span className="text-green-600">Aktif</span>
                  </div>
                  
                  {/* Account Type Badge */}
                  <div className="mt-4">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${accountType === 'email' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800'}`}>
                      {accountType === 'email' ? '‚úâÔ∏è Email User' : 'üîó Wallet User'}
                    </span>
                  </div>
                </div>

                {/* Quick Stats */}
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div>
                      <div className="text-2xl font-bold text-blue-600">
                        {transactionStats.totalTransactions}
                      </div>
                      <div className="text-xs text-gray-500">Total Transaksi</div>
                    </div>
                    <div>
                      <div className="text-2xl font-bold text-green-600">
                        {transactionStats.completedSales + transactionStats.completedPurchases}
                      </div>
                      <div className="text-xs text-gray-500">Selesai</div>
                    </div>
                  </div>

                  <div className="mt-4 space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Sebagai Penjual:</span>
                      <span className="font-medium">{transactionStats.asSeller}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Sebagai Pembeli:</span>
                      <span className="font-medium">{transactionStats.asBuyer}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Main Profile Form */}
            <div className="lg:col-span-2">
              <div className="bg-white rounded-lg shadow-sm">
                <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                  <h2 className="text-lg font-semibold text-gray-900">Informasi Pribadi</h2>
                  <button
                    onClick={handleEditToggle}
                    className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                  >
                    {isEditing ? 'Batal' : 'Edit Profil'}
                  </button>
                </div>

                <div className="p-6">
                  <div className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nama Tampilan <span className="text-red-500">*</span>
                      </label>
                      {isEditing ? (
                        <div>
                          <input
                            type="text"
                            value={editData.nama}
                            onChange={(e) => handleInputChange('nama', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Masukkan nama tampilan"
                            required
                          />
                          <p className="text-xs text-gray-500 mt-1">
                            Nama ini akan ditampilkan sebagai penjual/pembeli di marketplace
                          </p>
                        </div>
                      ) : (
                        <div className="flex items-center space-x-3">
                          <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                          <span className="text-gray-900">{editData.nama || 'Belum diatur'}</span>
                        </div>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Email
                      </label>
                      {isEditing && accountType === 'wallet' ? (
                        <input
                          type="email"
                          value={editData.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Masukkan email"
                        />
                      ) : (
                        <span className="text-gray-900">{editData.email || 'Belum diatur'}</span>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nomor Telepon
                      </label>
                      {isEditing ? (
                        <input
                          type="tel"
                          value={editData.nomor}
                          onChange={(e) => handleInputChange('nomor', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Masukkan nomor telepon"
                        />
                      ) : (
                        <span className="text-gray-900">{editData.nomor || 'Belum diatur'}</span>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        {accountType === 'email' ? 'Wallet Terhubung' : 'Alamat Wallet'}
                      </label>

                      {accountType === 'email' && !walletAddress ? (
                        <div className="space-y-3">
                          {!showWalletForm ? (
                            <button
                              onClick={() => setShowWalletForm(true)}
                              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
                            >
                              Tambahkan Wallet
                            </button>
                          ) : (
                            <div className="space-y-3">
                              <div className="flex gap-2">
                                <button
                                  onClick={handleConnectWalletClick}
                                  disabled={isConnectingWallet}
                                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm flex items-center gap-2"
                                >
                                  {isConnectingWallet ? (
                                    <>
                                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                      </svg>
                                      Menghubungkan...
                                    </>
                                  ) : 'Hubungkan MetaMask'}
                                </button>
                                <button
                                  onClick={() => setShowWalletForm(false)}
                                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 text-sm"
                                >
                                  Batal
                                </button>
                              </div>

                              <div className="relative">
                                <div className="absolute inset-0 flex items-center" aria-hidden="true">
                                  <div className="w-full border-t border-gray-300"></div>
                                </div>
                                <div className="relative flex justify-center">
                                  <span className="px-2 bg-white text-sm text-gray-500">ATAU</span>
                                </div>
                              </div>

                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  Masukkan Alamat Wallet Manual
                                </label>
                                <div className="flex gap-2">
                                  <input
                                    type="text"
                                    value={newWalletAddress}
                                    onChange={(e) => setNewWalletAddress(e.target.value)}
                                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="0x..."
                                  />
                                  <button
                                    onClick={handleManualWalletConnect}
                                    disabled={!newWalletAddress}
                                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-400 text-sm"
                                  >
                                    Simpan
                                  </button>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="flex items-center space-x-3">
                          <span className="text-gray-900 font-mono text-sm">{shortenAddress(walletAddress)}</span>
                          <button
                            onClick={() => navigator.clipboard.writeText(walletAddress)}
                            className="text-blue-600 hover:text-blue-700 text-sm"
                          >
                            Copy
                          </button>
                          {accountType === 'email' && walletAddress && (
                            <button
                              onClick={handleDisconnectWallet}
                              className="text-red-600 hover:text-red-700 text-sm"
                            >
                              Lepas
                            </button>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Save Button */}
                    {isEditing && (
                      <div className="mt-8 pt-6 border-t border-gray-200">
                        <div className="flex justify-end space-x-3">
                          <button
                            onClick={handleEditToggle}
                            className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                          >
                            Batal
                          </button>
                          <button
                            onClick={handleSave}
                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                          >
                            Simpan Perubahan
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Profile;
